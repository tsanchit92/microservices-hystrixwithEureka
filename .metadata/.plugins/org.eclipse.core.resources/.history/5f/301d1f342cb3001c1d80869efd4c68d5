package micro.services;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

import micro.services.model.CatalogItem;
import micro.services.model.Movie;
import micro.services.model.Rating;
import micro.services.model.UserRating;

@RestController
@RequestMapping("/catalog")
public class MovieCatalogResource {

	
	@Autowired
	MovieInfo movieInfo;

	@Autowired
	UserRatingInfo userRatingInfo;
	/*
	 * @Autowired private WebClient.Builder webclientbuilder;
	 */

	@RequestMapping("/{userId}")
	public List<CatalogItem> getCatalog(@PathVariable("userId") String userId) {
		UserRating ratings = getUserRating(userId);
		return ratings.getRatings().stream().map(rating -> getCatalogItem(rating)).collect(Collectors.toList());

	}

	

	@HystrixCommand(fallbackMethod = "getFallBackUserRating")
	private UserRating getUserRating(@PathVariable("userId") String userId) {
		return rt.getForObject("http://ratingdataservice/ratingsdata/users/" + userId, UserRating.class);
	}

	private CatalogItem getFallBackCatalogItem(Rating rating) {

		return new CatalogItem("movie name not found", "", rating.getRating());

	}

	private UserRating getFallBackUserRating(@PathVariable("userId") String userId) {
		UserRating userRating = new UserRating();
		userRating.setUserId(userId);
		userRating.setRatings(Arrays.asList(new Rating("0", 0)));
		return userRating;

	}

}
/*
 * Movie movie=webclientbuilder.build() .get()
 * .uri("http://localhost:9000/movies/" + rating.getMovieId()) .retrieve()
 * .bodyToMono(Movie.class) .block();
 */
